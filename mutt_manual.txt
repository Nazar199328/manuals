Шифрование паролей

Воспользуемся утилитой GnuPG. GnuPG позволяет шифровать и подписывать данные в целях безопасного хранения и передачи информации.

    Генерируем приватный ключ
    С помошью ключа шифруем файл с паролями

Генерируем свой ключ

Нажать для просмотра

Запускаем команду

$gpg --gen-key

Если не хочется долго ждать генерации,то можно запустить

$gpg --gen-key --quick-random

Далее система запросит:

Выберите тип ключа:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (только для подписи)
   (4) RSA (только для подписи)

Нужно выбрать ПЕРВЫЙ вариант.

Запрос системы:

ключи RSA могут иметь длину от 1024 до 4096 бит.
Какой размер ключа Вам необходим? (2048)

По умолчанию стоит 2048. Этого в настоящее время вполне хватит. Просто нажмите ENTER.

Запрос системы:

Выберите срок действия ключа.
        0 = без ограничения срока действительности
     <n>  = срок действительности n дней
     <n>w = срок действительности n недель
     <n>m = срок действительности n месяцев
     <n>y = срок действительности n лет
Ключ действителен до? (0)

В данном случае вы можете указать срок действия ключа. В качестве принятого (да и в законодательстве РФ), срок действия ключа ограничивают 1 годом. Но вы можете оставить и 0 - срок действия ключа не будет ограничен. Просто нажмите ENTER.

Запрос системы:

Для идентификации Вашего ключа необходим User ID
Программа создаст его из Вашего имени, комментария и адреса e-mail в виде:
    "Baba Yaga (pensioner) <yaga@deepforest.ru>"

Ваше настоящее имя:

Вам необходимо указать ваше полное имя, желательно латинскими символами. Например, как указано выше: Baba Yaga. Далее система запросит у вас адрес электронной почты, комментарий (что угодно можно указать тут). И после этого покажет полные введенные данные:

Вы выбрали следующий User ID:
"Baba Yaga (pensioner) <yaga@deepforest.ru>"

Если все ок, просто нажмите латинскую “О”. Система дважды запросит у вас пароль для ключа. Советую использовать сложный, но в то же время хорошо запоминаемый вами пароль. И после этого пойдет процесс генерации ключей. Необходимо сгенерировать много случайных чисел. Желательно, что бы Вы выполняли некоторые другие действия (печать на клавиатуре, движения мыши, обращения к дискам) в процессе генерации; это даст генератору случайных чисел возможность получить лучшую энтропию. Этот процесс протекает не очень быстро, поэтому не торопитесь его прерывать, думая, что все “зависло”.

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work to give
the OS a chance to collect more entropy! (Need 279 more bytes)

Что бы самому не клацать по клафишам во втором терминале можно запустить команду.

$ cat /dev/sda > /dev/null

или

dd if=/dev/sda of=/dev/null

Это должно создать достаточную генерацию случайных чисел.



Шифруем пароль
Сперва созадем файл ~/.mutt/.passwords и прописываем туда пароли в открытом виде как они должны быть в конфиге .muttrc.

~/.mutt/.passwords

set imap_pass="password"
set smtp_pass="password"

Далее шифруем файл с паролями

gpg -r your.email@example.com -e ~/.mutt/.passwords

Получаем на выходе зашифрованный файл .passwords.gpg

$ ls -1 ~/.mutt/.passwords*
/home/atomlab/.mutt/.passwords
/home/atomlab/.mutt/.passwords.gpg

Удаляем исходный файл с паролями

shred ~/.mutt/.passwords
rm ~/.mutt/.passwords

Для проверки выполним команду

gpg -d ~/.mutt/.passwords.gpg

Появится запрос пароля,который вы задавали при генерации ключа утилитой gpg.
На выходе получите расшифрованное содержимое файла.
Мы вставим эту строку в mutt и он при отправке сообщения будет сам расшифровывать файл с паролями.

Теперь открываем ~/.muttrc и вставляем в начало файла строку для расшифровки пароля.

~/.muttrc

source "gpg -d ~/.mutt/.passwords.gpg |"

set from = "user@gmail.com"
set realname = "Guillermo Garron"
set imap_user = "user@gmail.com"
set folder = "imaps://imap.gmail.com:993"
set spoolfile = "+INBOX"
set postponed ="+[Gmail]/Drafts"
set header_cache =~/.mutt/cache/headers
set message_cachedir =~/.mutt/cache/bodies
set certificate_file =~/.mutt/certificates
set smtp_url = "smtp://user@smtp.gmail.com:587/"
set move = no
set imap_keepalive = 900

Не забудьте удалить ранее созданные строки

set imap_pass="password"
set smtp_pass="password"

Все. Теперь попробуем отправить сообщение

echo "Test message" | mutt -s "Test" someuser@yandex.ru

Каждый раз при отправке сообщения будет запрашиватьс пароль от gpg ключа. Вводим пароль. Mutt получит расшифрованные пароли и отправит сообщение.
y - переключение между майлбоксами
