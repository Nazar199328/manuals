Инструкция по WIM
-------------------
#Для того, чтобы команды работали в русской раскладке в .vimrc добавить строчку:
set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЖ;ABCDEFGHIJKLMNOPQRSTUVWXYZ:,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz

#Передвижение по перенесенным строкам (wrapped lines) как по нормальным:
nnoremap j gj
nnoremap k gk

$ vim file.txt      # открыть файл

Перемещение по буферу:
----------------------
(h, j, k, l)    # перемещение на один символ
Ctrl+(f, b)     # постраничный скроллинг
w               # переместиться на слово вперед
0               # переместиться в начало строки
$               # переместиься в конец строки
b               # переместиться на слово назад
5l              # переместиться на 5 символов вправо
5h              # переместиться  на 5 символов влево
gg              # перейти в начало файла
G               # перейти в конец файла
56G             # перейти на строчку с номером 56
56gg            # перейти на строчку с номером 56
:56             # перейти на строчку с номером 56
+/-             # перейти на начало следующей/предыдущей строки

Редактирование в нормальном режиме.
----------------------------------
x               # удалить символ под курсором
X               # удалить символ слева от курсора
u               # отмена последней команды
Ctrl+r          # вернуть отмененное действие
.               # повтроить последнюю команду
U               # отмена всех последних изменений в строке
r               # замена одного символа
4dd             # удалить 4 строки (они помещаются в буфер)
3x              # удалить 3 символа
D               # удалить от текущей позиции до конца строки
J               # объединить строки
yy              # копировать строку в буфер
dw              # удалить часть слова от курсора до следующего слова
:pwd            # текущий каталог
:cd             # сменить директорию
%               # перейти к парной скобке
v + (hjkl)      # переход в визуальный режим (выделение текста).
gu              # к нижнему регистру
gU              # к верхнему регистру
Shift + v       # выделить строку
Ctrl + v        # выделение прямоугольника
# Для того, чтобы закомментировать несколько строчек, необходимо перейти в режим вставки блока Ctrl+V, затем клавишами j, k выделить строчки, после нажать редактирование блока Shift+I, вставить нужный символ и нажать Esc. Чтобы раскомментировать строки, также выделить блок и вместо редактирования нажать x. Это удалит первый символ в выделенных строчках

Pабота с буфером обмена clipboard
---------------------------------
"+y             # копирование в системный буфер clipboard
"+p             # вставка из clipboard

Работа с несколькими буферами.
-----------------------------
:e file1        # открыть файл
:e file2        # открыть еще один файл
:buffers        # посмотреть, какие буферы открыты
:ls             # то же, что и :buffers в короткой форме
:b <number>     # переключиться на указанный буфер
:bd <number>    # удалить буфер (имеется ввиду закрыть)
:bn             # следующий буфер
:bp             # предыдущий буфер
:set ro         # сделать буфер только для чтения
Ctrl+6          # переключиться на предыдущий буфер
:enew           # открыть новый пустой буфер
:tabe           # открыть новую пустую вкладку (не буфер!!!)
# Вкладки и буферы - это разные вещи! Буфер - временное хранилище одного
# открытого файла. Вкладка же содержит набор открытых в ней буферов и окон
:new 	        # новый буфер в новом окне с разделением окна по горизонали
:vnew	        # новый буфер в новом окне с разделением окна по вертикали

Работа с окнами
---------------
:w # записать буфер в файл;
:w filename.txt # записать буфер в новый файл;
:q # выйти;
:wq # записать файл и закрыть окно
ZZ # записать файл и закрыть окно
ZQ # закрыть окно без сохранеия

Ctrl+ws #разделить окно по горизонтали
Ctrl+wv # разбить окно по вертикали
Ctrl+w Ctrl+w # переключиться между окнами
Ctrl+w{h,j,k,l} # перейти к окну левее, ниже, выше, правее
Ctrl+wq # закрыть окно
Ctrl+wc # закрыть окно
Ctrl+wr # поменять окна местами, ротация окон

:sh # переключиться из vim на консоль; чтобы вернуться, набрать exit
Ctrl+z # переключиться из vim на консоль; чтобы вернуться, набрать fg

$ vim -O file_name1 file_name2 #Открыть два файла с вертикальной разбивкой окон
$ vim -o file_name1 file_name2 #Открыть два файла с горизонтальной разбивкой окон
:sp  # разделить окно по горизонтали
:vsp # разделить окно по вертикали
:sp filename # открыть новый файл в новом окне с горизонтальной разбивкой
:vsp filename # открыть новый файл в новом окне с вертикальной разбивкой
:hide # закрыть окно
Ctrl+w= # выровнять окна по размеру
Ctrl+w Ctrl+x # поменять окна местами

Работа со встроенным файловым менеджером.
----------------------------------------
Вызвать его можно командой :Explore
mf # пометить файл
D # удалить помеченые файлы. Удалит файл под курсором, если помеченых нет
R # переименовать файл под курсором
d # создать новый каталог
% # создать новый файл

Cпособы перейти в режим вставки
--------------------------------
i # вставить текст слева от текущего
I # вставить текст в начало строки
a # вставить текст справа от текущего символа
A # вставить текст в конец текущей строки
o # создать новую строку под текущей
O # создать новую строку над текущей
C # заменить всё до конца строки
r # заменить 1 символ
3s # удалить 3 символа и перейти в режим вставки
s # удалить смивол под курсором и перейти в режим вставки
ciW # заменить большое слово под курсором
Ctrl+p # автокомплит в режиме вставки

Коррекция во время ввода текста
-------------------------------
CTRL+h  # Удаляет последний символ
CTRL+w  # Удаляет последнее слово

:syntax on   #включить подсветку
:syntax off  #выключить подсветку (по умолчанию)

Перенос строк
--------------
:set wrap                 #разрешить word wrap (по умолчанию)
:set nowrap               #запретить word wrap

Замена
------
:s/было/стало   # заменит первое вхождение было на стало
:s/было/стало/g # заменит было на стало во всей строке
:1,2s/было/стало/g  #где 1,2 номера этих строк для замены всех вхождений последовательности символов между двумя  строками
:%s/было/стало/g    #для замены всех вхождений во всем файле.

Выполнение внешних команд
------------------------
:!command #  будет показан вывод команды
:r!command (например :r!ping ya.ru) # вставка вывода внешней команды в файл

Шифрование при помощи vim
-------------------------
vim -x password.txt  # запускаем вим с ключом -x
vim password.txt     # запускаем обычно, просто вим попросит ввести пароль

:colorscheme desert  # смена цветовой схемы (например на desert)


:set tw=79 # Автоматический перенос на новую строчку при наборе
:set textwidth=79 # Автоматический перенос на новую строчку при наборе
:set tw=0 # Отключить автоперенос слов на новую строчку при наборе

NERD Tree
---------
i #(split — расщепить) открыть содержимое директории в новом окне
m #(menu — меню) показать меню работы с файлами
R #(Refresh — освежить)
I #(hIdden — скрытый) показать/скрыть скрытые файлы
:Bookmark name # создать закладку на отмеченную папку с именем name
o #открыть файл
s #открыть файл в vsplit

recording
---------
q<letter> #включает recording
q # выключает recording

vim-figitive
-------------
:Gwrite     :Git add %          Сохранить изменения
:Gread      :Git chechout %     Вернуться к закоммиченной версии
:Gcommit    :Git commit %       Закоммитить изменения
:Gpush      :Git push %         Залить коммит на удаленный репозиторий
:Gstatus    :Git status %       Статус 

scrooloose/nerdcommenter
------------------------
[count]<leader>cc |NERDComComment|
#Comment out the current line or text selected in visual mode.
#закомметировать текущую строчку или текст, выделенный в визуальном режиме.

[count]<leader>cn |NERDComNestedComment|
#Same as <leader>cc but forces nesting.

[count]<leader>c |NERDComToggleComment|
#Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.

[count]<leader>cm |NERDComMinimalComment|
#Comments the given lines using only one set of multipart delimiters.
#Комметрирует весь выделенный блок, а не каждую строчку отдельно.

[count]<leader>ci |NERDComInvertComment|
#Toggles the comment state of the selected line(s) individually.
#Комментирует каждую выбранную строчку отдельно.

[count]<leader>cs |NERDComSexyComment|
#Comments out the selected lines ``sexily''
#Комментирует выбранные линии "сексуально"

[count]<leader>cy |NERDComYankComment|
#Same as <leader>cc except that the commented line(s) are yanked first.
#Тоже, что и <leader>cc за исключением того, что закомментированные строки копируются в буфер редактора vim в первоначальном виде.

<leader>c$ |NERDComEOLComment|
#Comments the current line from the cursor to the end of line.
#Комментирует текущую строчку от курсора до конца строки.

<leader>cA |NERDComAppendComment|
#Adds comment delimiters to the end of line and goes into insert mode between them.
#Добавляет ограничители к концу линии и переходит в режим вставки между ними.

|NERDComInsertComment|
Adds comment delimiters at the current cursor position and inserts between. Disabled by default.

<leader>ca |NERDComAltDelim|
#Switches to the alternative set of delimiters.
#Переключается на альтернативный набор разделителей (например, // либо /* */)

[count]<leader>cl
[count]<leader>cb |NERDComAlignedComment|
#Same as |NERDComComment| except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).

[count]<leader>cu |NERDComUncommentLine|
#Uncomments the selected line(s).
#Раскомментировать выбранные строки.

chrisbra/SudoEdit.vim
---------------------
:SudoRead[!] [file] #Открыть файл, который может прочитать только суперпользователь
:[range]SudoWrite[!] [file] #Записать файл как файл суперпользователя

/usr/share/vim/vim74/macros/less.sh file.txt    #просмотр файла при помощи vim

 #Если нажать пробел внутри фигурных скобок в режиме редактирования исходного кода C/C++, тело блока скроется. Повторное нажататие  пробела вернет его на место.
